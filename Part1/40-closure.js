'use strict'

// "변수의 유효범위와 클로저"
// 자바스크립트는 함수 지향 언어입니다. 이런 특징은 개발자에게 많은 자유도를 줍니다.
// 함수를 동적으로 생성할 수 있고, 생성한 함수를 다른 함수에 인수로 넘길 수 있으며,
// 생성된 곳이 아닌 곳에서 함수를 호출할 수도 있기 때문입니다.

// 함수 내부에서 함수 외부에 있는 변수에 접근할 수 있다는 사실은 앞서 학습해서 알고 계실 겁니다.
// 그런데 함수가 생성된 이후에 외부 변수가 변경되면 어떤 일이 발생할까요? 
// 함수는 새로운 값을 가져올까요? 아니면 생성 시점 이전의 값을 가져올까요?

// 매개변수를 통해 함수를 넘기고 이 함수를 저 멀리 떨어진 코드에서 호출할 땐 어떤 일이 발생할까요? 
// 함수는 호출되는 곳을 기준으로 외부 변수에 접근할까요?

// 이젠 이런 간단한 시나리오부터 시작해 좀 더 복잡한 시나리오를 다룰 수 있도록 지식을 확장해 봅시다.




// "코드 블록"



// "중첩 함수"



// "렉시컬 환경"
// 지금까진 로우 레벨 영역은 최대한 피하는 방식으로 튜토리얼을 전개했습니다. 
// 하지만 여기서 다루는 내용을 알지 못하면 자바스크립트를 완전히 이해할 수 없습니다. 
// 호랑이 굴에 들어가 호랑이를 잡아봅시다!




// "가비지 컬렉션"










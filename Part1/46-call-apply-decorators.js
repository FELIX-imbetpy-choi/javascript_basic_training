'use strict'


// "call/apply와 데코레이터, 포워딩"
// 자바스크립트는 함수를 다룰 때 탁월한 유연성을 제공합니다. 
// 함수는 이곳저곳 전달될 수 있고, 객체로도 사용될 수 있습니다. 
// 이번 챕터에선 함수 간에 호출을 어떻게 포워딩(forwarding) 하는지, 
// 함수를 어떻게 데코레이팅(decorating) 하는지에 대해 알아보겠습니다.




// "요약"
// 데코레이터는 함수를 감싸는 래퍼로 함수의 행동을 변화시킵니다. 주요 작업은 여전히 함수에서 처리합니다.

// 데코레이터는 함수에 추가된 ‘기능’ 혹은 ‘상(相, aspect)’ 정도로 보시면 됩니다. 하나 혹은 여러 개의 데코레이터를 추가해도 함수의 코드는 변경되지 않습니다.

// cachingDecorator는 아래와 같은 메서드를 사용해 구현하였습니다.

// func.call(context, arg1, arg2…) – 주어진 컨텍스트와 인수를 사용해 func를 호출합니다.
// func.apply(context, args) – this에 context가 할당되고, 유사 배열 args가 인수로 전달되어 func이 호출됩니다.
// 콜 포워딩은 대개 apply를 사용해 구현합니다.








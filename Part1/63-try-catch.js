"use strict"



// "'try..catch'와 에러 핸들링"




// // "요약"
// try catch 를 이용하면 런타임 에러를 처리할 수 있습니다
// try 에선 코드를 실행하고, 에러가 발생하면 catch 에서 잡아냅니다
// try {
//     // 이곳의 코드를 실행
//   } catch(err) {
//     // 에러가 발생하면, 여기부터 실행됨
//     // err는 에러 객체
//   } finally {
//     // 에러 발생 여부와 상관없이 try/catch 이후에 실행됨
// }
// try..catch, try..catch..finally이외에도 try..finally를 사용할 수 있습니다.

// 에러 객체엔 다음과 같은 프로퍼티가 있습니다
//     message – 사람이 읽을 수 있는 형태의 에러 메시지
//     name – 에러 이름을 담은 문자열 (에러 생성자 이름)
//     stack – 표준이 아니지만 대부분의 호스트 환경이 지원하는 프로퍼티로 에러가 발생한 순간의 스택을 나타냄

// throw 연산자를 사용하면 에러를 직접 만들 수 있습니다 
// 이론상으론 throw 인수에 모든 것을 넘길 수 있지만
// 대개 내장 Error 클래스를 상속받은 에러 객체를 인수에 넘깁니다
// 에러 상속에 대해선 다음 챕터에서 다룹니다

// try catch 가 없어도 대부분의 호스트 환경이 전역 에러 핸들러를 지원하기 때문에
// 떨어져 나온 에러를 잡을 수 있습니다
// window.onerror는 브라우저 환경의 전역 에러 핸들러입니다.














